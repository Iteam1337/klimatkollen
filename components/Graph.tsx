import Head from 'next/head'
import { useEffect, useState } from 'react'
import { animated, useSpring, useSpringRef, useChain } from 'react-spring'

// import bezier from 'bezier-curve'

// https://dev.to/tomdohnal/react-svg-animation-with-react-spring-4-2kba

type Co2Year = { year: number; co2: number }

const max = (array: Array<Co2Year>, key: 'year' | 'co2') => {
  return Math.max(...array.map((d) => d[key]))
}

// const bezierCurve = (normalizedData: [number, number]) => {
//   const curve = []
//   for (let t = 0; t < 1; t += 0.01) {
//     const point = bezier(t, normalizedData)
//     curve.push(point)
//   }
//   return curve
// }

type Data = {
  pledgesPath?: string
  parisPath?: string
  historyPath?: string
}

type Props = {
  history?: string
  pledges?: string
  paris?: string
  klimatData: Array<Data>
  currentStep: number
  width: number
  height: number
}

const YEARS = [1990, 2000, 2010, 2020, 2025]

const Graph = ({ klimatData, currentStep, width, height }: Props) => {
  const [loaded, setLoaded] = useState(false)
  const [minYear, setMinYear] = useState(1990)
  const [maxYear, setMaxYear] = useState(2030)
  const [labelSteps, setLabelSteps] = useState<number[]>([])

  const parisPropsRef = useSpringRef()
  const historyPropsRef = useSpringRef()
  const pledgesPropsRef = useSpringRef()

  const historyProps = useSpring({
    d: klimatData[currentStep].historyPath,
    config: {
      duration: 200,
      // clamp: true,
      // easing: easings.easeInOutBounce,
    },
    ref: historyPropsRef,
  })

  const parisProps = useSpring({
    d: klimatData[currentStep].parisPath,
    config: {
      duration: 100,
      // easing: easings.easeInOutBounce,
    },
    ref: parisPropsRef,
  })
  const pledgesProps = useSpring({
    d: klimatData[currentStep].pledgesPath,
    config: {
      duration: 200,
    },
    ref: pledgesPropsRef,
  })

  useChain([historyPropsRef, parisPropsRef, pledgesPropsRef])

  useEffect(() => {
    setTimeout(() => setLoaded(true), 300)

    const xCoords = YEARS.map((year) => {
      return ((year - minYear) / (maxYear - minYear)) * width
    })
    setLabelSteps(xCoords)
  }, [minYear, maxYear])

  const YearLabel = ({
    width = 500,
    height = 240,
    year,
    offset = 0,
    x,
  }: {
    width?: number
    height?: number
    offset?: number
    year: number
    x: number
  }) => {
    const y = height + 30 - offset
    return (
      <animated.text className="label" y={y} x={x}>
        {year}
      </animated.text>
    )
  }

  useEffect(() => {
    switch (currentStep) {
      case 0:
        setMinYear(1990)
        setMaxYear(2020)

        break
      case 1:
        setMinYear(1990)
        setMaxYear(2030)
        break
      case 2:
        setMinYear(1990)
        setMaxYear(2030)

        break
      case 3:
        setMinYear(2018)

        break
      default:
        break
    }
  }, [currentStep])

  return (
    <>
      <Head>
        <title>Klimatkollen</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <div className={loaded ? 'loaded' : ''}>
        <svg viewBox={`0 -10 ${width} ${height + 30}`}>
          <defs>
            <filter id="dropshadow">
              <feGaussianBlur in="SourceAlpha" stdDeviation="3"></feGaussianBlur>
              <feOffset dx="0" dy="0" result="offsetblur"></feOffset>
              <feComponentTransfer>
                <feFuncA slope="0.2" type="linear"></feFuncA>
              </feComponentTransfer>
              <feMerge>
                <feMergeNode></feMergeNode>
                <feMergeNode in="SourceGraphic"></feMergeNode>
              </feMerge>
            </filter>
          </defs>
          <g className="datasets">
            <animated.path
              className="dataset show"
              d={historyProps.d}
              id="dataset-1"></animated.path>
            <animated.path
              className="dataset show"
              d={pledgesProps.d}
              id="dataset-2"></animated.path>
            <animated.path
              className="dataset show"
              d={parisProps.d}
              id="dataset-3"></animated.path>
          </g>
          <YearLabel key="1" year={1990} x={labelSteps[0]} />
          <YearLabel key="2" year={2000} x={labelSteps[1]} />
          <YearLabel key="3" year={2010} x={labelSteps[2]} />
          <YearLabel key="4" year={2020} x={labelSteps[3]} />
          <YearLabel key="5" year={2025} x={labelSteps[4]} />
        </svg>
      </div>
    </>
  )
}

export default Graph
