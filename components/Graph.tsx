import Head from 'next/head'
import { useEffect, useState } from 'react'
import { path } from 'd3-path'
import { animated, useSpring, useTransition } from 'react-spring'
// https://dev.to/tomdohnal/react-svg-animation-with-react-spring-4-2kba

type Co2Year = { year: number; co2: number }

const max = (array: Array<Co2Year>, key: 'year' | 'co2') => {
  return Math.max(...array.map((d) => d[key]))
}
const min = (array: Array<Co2Year>, key: 'year' | 'co2') => {
  return Math.min(...array.map((d) => d[key]))
}

type Props = {
  data: Array<Co2Year>
  pledges: Array<Co2Year>
  paris: Array<Co2Year>
  currentStep: string
  width: number
  height: number
}

const Graph = ({ data, pledges, paris, currentStep, width, height }: Props) => {
  const [loaded, setLoaded] = useState(false)
  const [showNow, setShowNow] = useState(false)
  const [showParis, setShowParis] = useState(false)
  const [showPledges, setShowPledges] = useState(false)
  const [showSummary, setShowSummary] = useState(false)
  const [minYear, setMinYear] = useState(1990)
  const [maxYear, setMaxYear] = useState(2030)
  const [minCo2, setMinCo2] = useState(0)
  const [maxCo2, setMaxCo2] = useState(0)

  useEffect(() => {
    setTimeout(() => setLoaded(true), 300)
  }, [])

  const line = (data: Array<Co2Year>) => {
    if (!data.length) return ''
    const p = path()

    const normalizedData = data.map((d: { year: number; co2: number }) => ({
      x: ((d.year - minYear) * width) / (maxYear - minYear),
      y: height - (d.co2 / maxCo2) * height,
    }))
    console.log({ maxCo2, minCo2, normalizedData })
    // start at the top left
    p.moveTo(normalizedData[0].x, normalizedData[0].y)

    // draw all the datapoints
    normalizedData.forEach((d) => p.lineTo(d.x, d.y))

    // draw the bottom of the line
    p.lineTo(normalizedData[normalizedData.length - 1]?.x || 0, height)
    p.lineTo(normalizedData[0].x, height)
    p.lineTo(normalizedData[0].x, normalizedData[0].y)
    p.closePath()
    return p.toString()
  }

  const square = (
    data: Array<Co2Year>,
    {
      width = 500,
      height = 240,
      x = 0,
    }: {
      width?: number
      height?: number
      x?: number
    },
  ) => {
    if (!data.length) return ''
    const p = path()
    p.moveTo(x, height)
    const totalCo2 = data.reduce(
      (sum, d: { year: number; co2: number }) => sum + d.co2,
      0,
    )
    p.lineTo(x, height - (totalCo2 / maxCo2) * height)
    p.lineTo(x + width / 2, height - (totalCo2 / maxCo2) * height)
    p.lineTo(x + width / 2, height)
    p.lineTo(x, height)
    p.closePath()
    return p.toString()
  }

  const YearLabel = ({
    width = 500,
    height = 240,
    year,
    offset = 0,
  }: {
    width?: number
    height?: number
    offset?: number
    year: number
  }) => {
    const x = ((year - minYear) / (maxYear - minYear)) * width
    const y = height + 30 - offset
    return (
      <text className="label" transform={`translate(${x}, ${y})`}>
        {year}
      </text>
    )
  }

  useEffect(() => {
    switch (currentStep) {
      case 'now':
        setMaxCo2(max(data, 'co2'))
        setShowNow(true)
        setShowParis(false)
        setShowPledges(false)
        setShowSummary(false)
        setMinYear(1990)
        setMaxYear(2020)
        break
      case 'paris':
        setMaxCo2(max(data, 'co2'))
        setShowNow(true)
        setShowParis(true)
        setShowPledges(false)
        setShowSummary(false)
        setMinYear(1990)
        setMaxYear(2030)

        break
      case 'pledges':
        setMaxCo2(max(data, 'co2'))
        setShowNow(true)
        setShowParis(true)
        setShowPledges(true)
        setShowSummary(false)
        setMinYear(2018)

        break
      case 'summary':
        setMaxCo2(max(data, 'co2') * data.length)
        setShowNow(false)
        setShowParis(false)
        setShowPledges(false)
        setShowSummary(true)
        setMinYear(2020)
        break
      default:
        break
    }
  }, [currentStep])

  return (
    <>
      <Head>
        <title>Klimatkollen</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <div className={loaded ? 'loaded' : ''}>
        <svg viewBox={`0 -10 ${width} ${height + 30}`}>
          <defs>
            <filter id="dropshadow">
              <feGaussianBlur in="SourceAlpha" stdDeviation="3"></feGaussianBlur>
              <feOffset dx="0" dy="0" result="offsetblur"></feOffset>
              <feComponentTransfer>
                <feFuncA slope="0.2" type="linear"></feFuncA>
              </feComponentTransfer>
              <feMerge>
                <feMergeNode></feMergeNode>
                <feMergeNode in="SourceGraphic"></feMergeNode>
              </feMerge>
            </filter>
          </defs>
          <g className="datasets">
            <animated.path
              className={showNow ? 'dataset show' : 'dataset hidden'}
              d={line(data)}
              id="dataset-1"></animated.path>
            <animated.path
              className={showPledges || showSummary ? 'dataset show' : 'dataset hidden'}
              d={
                showSummary
                  ? square(pledges, {
                      width,
                      height,
                      x: 0,
                    })
                  : line(pledges)
              }
              id="dataset-2"></animated.path>
            )
            <animated.path
              className={showParis || showSummary ? 'dataset show' : 'dataset hidden'}
              d={
                showSummary
                  ? square(paris, {
                      x: width / 2,
                    })
                  : line(paris)
              }
              id="dataset-3"></animated.path>
          </g>
          {!showSummary && (
            <>
              <text x="0" y="15" className="label">
                {Math.ceil(maxCo2 / 1000) * 1000} co2
              </text>
              <YearLabel key="1" year={1990} />
              <YearLabel key="2" year={2000} />
              <YearLabel key="3" year={2010} />
              <YearLabel key="4" year={2020} />
              <YearLabel key="5" year={2025} />
            </>
          )}
        </svg>
      </div>

      {/* <button onClick={() => step5()}>step5</button> */}
    </>
  )
}

export default Graph
